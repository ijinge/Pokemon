import sys
import os
import math
import matplotlib.pyplot as plt
import torch
import torchvision
from torch.utils.data import Dataset, DataLoader, random_split
from torchvision import transforms
from torchvision.models import resnet50, ResNet50_Weights
    
@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    correct = 0
    total = 0
    val_loss = 0.0
    criterion = torch.nn.CrossEntropyLoss()
    for (inputs, labels) in val_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        val_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    accuracy = correct / total * 100
    val_loss /= len(val_loader)
    return accuracy, val_loss

if __name__ == "__main__":
    transform = transforms.Compose([
        transforms.Resize((256, 256)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    dataset = torchvision.datasets.ImageFolder(root="./data/pokemon", transform=transform)
    train_dataset_size = int(0.7 * len(dataset))
    train_dataset, val_dataset = random_split(dataset, [train_dataset_size, len(dataset) - train_dataset_size])

    num_epochs = 10
    num_classes = len(dataset.classes)
    batch_size = 16
    lr = 1e-4
    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=True)

    model = resnet50(weights=ResNet50_Weights.IMAGENET1K_V2)
    model.fc = torch.nn.Linear(model.fc.in_features, num_classes)
    model.to(device)

    criterion = torch.nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)

    # -------------------- train -----------------
    train_loss_logs = []
    val_loss_logs = []
    val_acc_logs = []
    for epoch in range(1, num_epochs + 1):
        model.train()
        cnt = 0
        train_one_loss = 0.0
        for iter_idx, (inputs, labels) in enumerate(train_loader):
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            # check loss
            loss_value = loss.item()
            if not math.isfinite(loss_value):
                print("Loss is {}, stopping training".format(loss_value))
                sys.exit(1)
            train_one_loss += loss_value
            loss.backward()
            optimizer.step()

            if iter_idx % 7 == 0:
                print('Epoch [{}/{}], Iteration [{}/{}], Loss: {:.4f}'.format(epoch, num_epochs, iter_idx + 1,
                                                                              len(train_loader), loss.item()))
        train_loss_logs.append((epoch, train_one_loss / len(train_loader)))

        # -------------------- evaluate -----------------
        if epoch % 5 == 0 or epoch == num_epochs:
            accuracy, val_loss = evaluate(model, val_loader)
            val_acc_logs.append((epoch, accuracy))
            val_loss_logs.append((epoch, val_loss))
            print('Accuracy: {:.2f}%'.format(accuracy))
            if not os.path.exists('checkpoints'):
                os.makedirs('checkpoints')
            torch.save(model.state_dict(), 'checkpoints/checkpoint-{}-Acc-{:.2f}.pth'.format(epoch, accuracy))

    # 绘制训练和验证损失
    epochs = [sample[0] for sample in train_loss_logs]
    train_loss = [sample[1] for sample in train_loss_logs]
    val_loss = [sample[1] for sample in val_loss_logs]

    plt.figure(figsize=(10, 5))
    plt.plot(epochs, train_loss, label='Training Loss')
    plt.plot(epochs, val_loss, label='Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training and Validation Loss')
    plt.legend()
    plt.show()

    # 绘制验证准确率
    val_acc = [sample[1] for sample in val_acc_logs]

    plt.figure(figsize=(10, 5))
    plt.plot(epochs, val_acc, label='Validation Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy (%)')
    plt.title('Validation Accuracy')
    plt.legend()
    plt.show()
